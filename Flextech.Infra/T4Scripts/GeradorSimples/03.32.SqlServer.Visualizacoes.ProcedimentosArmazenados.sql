

/*
==================================================================================
Solução..........: Flextech
Projeto..........: Modelo
Arquivo..........: BancoDeDadosScripts\Gerado\32.Visualizacoes.ProcedimentosArmazenados.sql
Descrição........: Script de criação dos procedimentos armazenados das 
                   visualizações da base de dados CALCULADOR_RENDIMENTO
==================================================================================
Criação..........: 06/03/2018 - Lessandro Santana
Alteração........: 10/05/2018 - Lessandro Santana
==================================================================================
Gerado em........: 10/05/2019 16:45:57
==================================================================================
*/

print '';
print 'Script...........: 32.Visualizacoes.ProcedimentosArmazenados.sql';
print 'Inicio...........: ' + CONVERT(VARCHAR, GETDATE(), 121);


USE [CALCULADOR_RENDIMENTO];
GO


-- ##################################################################################################################################################
-- ##################################################################################################################################################
-- ##################################################################################################################################################


DECLARE @SCHEMA_NAME					VARCHAR(200);
DECLARE @TABLE_NAME						VARCHAR(200);
DECLARE @TABLE_TYPE						VARCHAR(200);
DECLARE @SAIDA_EXEC						VARCHAR(MAX);

DECLARE @DROP_PROCEDURE_TEMPLATE		VARCHAR(MAX) = '';
DECLARE @SELECT_TEMPLATE				VARCHAR(MAX) = '';

DECLARE @SELECT_PARAMETERS				VARCHAR(MAX) = '';
DECLARE @SELECT_PARAMETERS_WHERE		VARCHAR(MAX) = '';


-- ##################################################################################################################################################
-- ##################################################################################################################################################
-- ##################################################################################################################################################


SET @DROP_PROCEDURE_TEMPLATE = 'DROP PROCEDURE IF EXISTS [#SCHEMA_NAME#].[zusp__#TABLE_NAME#__#PROCEDURE_NAME#];';


-- ##################################################################################################################################################
-- ##################################################################################################################################################
-- ##################################################################################################################################################


SET @SELECT_TEMPLATE = '
CREATE PROCEDURE [#SCHEMA_NAME#].[zusp__#TABLE_NAME#__selecionar]
	
	#SELECT_PARAMETERS#

	@EXECUTADO_COM_SUCESSO BIT				= 0 OUTPUT
AS
BEGIN

	SELECT	*
	FROM	[#SCHEMA_NAME#].[#TABLE_NAME#]
	WHERE	(1=1)
	#SELECT_PARAMETERS_WHERE#

END;';


-- ##################################################################################################################################################
-- ##################################################################################################################################################
-- ##################################################################################################################################################


DECLARE	Views CURSOR FOR
		SELECT	DISTINCT 
				TABLE_SCHEMA, TABLE_NAME, 'BASE TABLE' as TABLE_TYPE
		FROM	INFORMATION_SCHEMA.VIEWS
        WHERE	TABLE_NAME NOT IN ('sysdiagrams')
		--WHERE	TABLE_SCHEMA NOT IN ('DBO')
		--AND		TABLE_TYPE = 'BASE TABLE'
		ORDER	BY TABLE_SCHEMA, TABLE_NAME;

OPEN Views;
FETCH NEXT FROM Views INTO @SCHEMA_NAME, @TABLE_NAME, @TABLE_TYPE;

WHILE @@FETCH_STATUS = 0
BEGIN
-- ##################################################################################################################################################
-- ##################################################################################################################################################
-- ##################################################################################################################################################

		SET @SAIDA_EXEC = @DROP_PROCEDURE_TEMPLATE;
		SET @SAIDA_EXEC = REPLACE(@SAIDA_EXEC, '#SCHEMA_NAME#', @SCHEMA_NAME);
		SET @SAIDA_EXEC = REPLACE(@SAIDA_EXEC, '#TABLE_NAME#', @TABLE_NAME);
					                                                                SET @SAIDA_EXEC = REPLACE(@SAIDA_EXEC, '#PROCEDURE_NAME#', 'selecionar');
		EXEC (@SAIDA_EXEC);


-- ##################################################################################################################################################
-- ##################################################################################################################################################
-- ##################################################################################################################################################


		SET @SELECT_PARAMETERS			= '';
		SET @SELECT_PARAMETERS_WHERE	= '';

		SELECT	@SELECT_PARAMETERS = @SELECT_PARAMETERS + 
				'@' + [COLUMN_NAME] + ' ' +
				'[' + [DATA_TYPE] + ']' + 
				CASE
					WHEN [DATA_TYPE] = 'varchar' THEN '(' + RTRIM([CHARACTER_MAXIMUM_LENGTH]) + ') '
					WHEN [DATA_TYPE] = 'decimal' THEN '(' + RTRIM([NUMERIC_PRECISION]) + ',' + RTRIM([NUMERIC_SCALE]) + ') '
					ELSE ''
				END +
				' = NULL, ',
				@SELECT_PARAMETERS_WHERE = @SELECT_PARAMETERS_WHERE +
				'AND ((@' + [COLUMN_NAME] + ' IS NULL) OR (' + [COLUMN_NAME] + '=@' + [COLUMN_NAME] + ')) '
		FROM	INFORMATION_SCHEMA.COLUMNS
		WHERE	TABLE_SCHEMA = @SCHEMA_NAME
		AND		TABLE_NAME = @TABLE_NAME
		ORDER	BY ORDINAL_POSITION;


-- ##################################################################################################################################################
-- ##################################################################################################################################################
-- ##################################################################################################################################################
				

		SET @SAIDA_EXEC = @SELECT_TEMPLATE;
		SET @SAIDA_EXEC = REPLACE(@SAIDA_EXEC, '#SCHEMA_NAME#', @SCHEMA_NAME);
		SET @SAIDA_EXEC = REPLACE(@SAIDA_EXEC, '#TABLE_NAME#', @TABLE_NAME);
		SET @SAIDA_EXEC = REPLACE(@SAIDA_EXEC, '#SELECT_PARAMETERS#', @SELECT_PARAMETERS);
		SET @SAIDA_EXEC = REPLACE(@SAIDA_EXEC, '#SELECT_PARAMETERS_WHERE#', @SELECT_PARAMETERS_WHERE);
		EXEC (@SAIDA_EXEC);
        --print @SAIDA_EXEC;
		if @@ERROR > 0 GOTO ERROR_TEXT


-- ##################################################################################################################################################
-- ##################################################################################################################################################
-- ##################################################################################################################################################


	FETCH NEXT FROM Views INTO @SCHEMA_NAME, @TABLE_NAME, @TABLE_TYPE;
END;

CLOSE Views;
DEALLOCATE Views;



GOTO FIM

ERROR_TEXT:
	CLOSE Views;
	DEALLOCATE Views;
	print (@SAIDA_EXEC);


FIM:
GO


-- ##################################################################################################################################################
-- ##################################################################################################################################################
-- ##################################################################################################################################################


print 'Fim..............: ' + CONVERT(VARCHAR, GETDATE(), 121);
print '--------------------------------------------------------------------------------';
print '';
