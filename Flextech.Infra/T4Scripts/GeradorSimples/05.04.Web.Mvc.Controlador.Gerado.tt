<#@ template language="C#" hostSpecific="true" debug="true" #>
<#@ assembly name="$(ProjectDir)$(OutDir)Flextech.Infra.dll" #>
<#@ include  file="..\Funcoes.ttinclude" #>
<#@ output extension=".txt" #>
<#@ parameter name="TABELA__NOME" type="System.String" #>
<# 
	CarregarVariaveisDaSolucao();

    Flextech.Infra.T4Scripts.Database.SqlServerDatabase DB = new Flextech.Infra.T4Scripts.Database.SqlServerDatabase(VariaveisDaSolucao.ConexaoBaseDeDados);
    Flextech.Infra.T4Scripts.Database.Table table;
    Flextech.Infra.T4Scripts.Database.Table view;
    
    string nomeDaTabelaPascalCase = ToPascalCase(TABELA__NOME);

	string arquivo = @"Controllers\Gerado\" + nomeDaTabelaPascalCase + @"Controller.gerado.cs";

    StringBuilder sb = new StringBuilder();

    table = DB.Tables.Find(a => a.Name == TABELA__NOME);

#>
/*
==================================================================================
Solução..........: Flextech
Projeto..........: Modelo
Arquivo..........: <#= arquivo #>
Espaço de nome...: <#= VariaveisDaSolucao.EspacoDeNomeProjetoVisualizacaoWeb #>
Classe...........: <#= nomeDaTabelaPascalCase #>Controller.gerado.cs
Descrição........: Classe MVC Controller gerada 
==================================================================================
Criação..........: 22/01/2018 - Lessandro Santana
Alteração........: 27/05/2019 - Lessandro Santana
==================================================================================
Gerado em........: <#= DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss") #>

Arquivo gerado automaticamente pelo Replicador da Flextech.

NÃO EDITE ESTE ARQUIVO.
TODAS AS ALTERAÇÕES FEITAS AQUI PODERÃO SER PERDIDAS.
==================================================================================
*/

using System.Web.Mvc;
using Flextech.Infra.Extensoes;

namespace <#= VariaveisDaSolucao.EspacoDeNomeProjetoVisualizacaoWeb #>.Controllers
{
    public partial class <#= nomeDaTabelaPascalCase #>Controller : Base.BaseController
    {
        public Modelo.<#= nomeDaTabelaPascalCase #> <#= nomeDaTabelaPascalCase #>Modelo { get; set; }

        private void InicializarModelo()
        {
            this.<#= nomeDaTabelaPascalCase #>Modelo = new Modelo.<#= nomeDaTabelaPascalCase #>(nomeComputador: base.NOME_COMPUTADOR, nomeUsuario: base.NOME_USUARIO, enderecoIP: base.ENDERECO_IP);
        }

        private void PreencherModeloComDadosDaTela(FormCollection formCollection)
        {
            InicializarModelo();

            string token = formCollection["token"];

            this.<#= nomeDaTabelaPascalCase #>Modelo.<#= nomeDaTabelaPascalCase #>RegistroAtivo.SelecionarDaVisualizacaoPorToken(token);
            
            if (this.<#= nomeDaTabelaPascalCase #>Modelo.ExisteErro)
            {
                Session["ExisteErro"] = true;
                Session["TextoDaMensagemDeErro"] = <#= nomeDaTabelaPascalCase #>Modelo.TextoDaMensagemDeErro;

                Response.Redirect($"/{this.USUARIO_TOKEN}/Principal/Erro/");
            }

<#  foreach (Flextech.Infra.T4Scripts.Database.Column column in table.Columns)
    {
        if (column.Name == "ID" || column.Name == "REGISTRO_EXCLUIDO") { continue; }

        switch (column.Type.ToLower())
        {
            case "binary":
            case "image":
            case "varbinary":
                sb.AppendLine("ERRO: "+ column.Type.ToLower());
                break;

            case "bit":
                sb.AppendLine("            this." + nomeDaTabelaPascalCase + "Modelo." + nomeDaTabelaPascalCase + "RegistroAtivo.RegistroDaVisualizacao." + column.Name + " = formCollection[\"" + column.Name + "\"].ToBoolean();");
                break;

            case "datetime":
            case "smalldatetime":
                sb.AppendLine("            this." + nomeDaTabelaPascalCase + "Modelo." + nomeDaTabelaPascalCase + "RegistroAtivo.RegistroDaVisualizacao." + column.Name + " = formCollection[\"" + column.Name + "\"].ToDateTime(from: FormatoDataHora.ddMMyyyyHHmmss, to: FormatoDataHora.yyyyMMddHHmmss);");
                break;

                

            case "char":
            case "nchar":
            case "varchar":
            case "nvarchar":
            case "text":
            case "xml":
                sb.AppendLine("            this." + nomeDaTabelaPascalCase + "Modelo." + nomeDaTabelaPascalCase + "RegistroAtivo.RegistroDaVisualizacao." + column.Name + " = formCollection[\"" + column.Name + "\"];");
                break;

            case "decimal":
            case "money":
            case "numeric":
            case "float":
            case "real":
                sb.AppendLine("            this." + nomeDaTabelaPascalCase + "Modelo." + nomeDaTabelaPascalCase + "RegistroAtivo.RegistroDaVisualizacao." + column.Name + " = formCollection[\"" + column.Name + "\"].TryParseToDecimal();");
                break;

            case "int":
            case "smallint":
            case "tinyint":
            case "bigint":
                sb.AppendLine("            this." + nomeDaTabelaPascalCase + "Modelo." + nomeDaTabelaPascalCase + "RegistroAtivo.RegistroDaVisualizacao." + column.Name + " = formCollection[\"" + column.Name + "\"].TryParseToInt();");
                break;

            case "uniqueidentifier":
                sb.AppendLine("            this." + nomeDaTabelaPascalCase + "Modelo." + nomeDaTabelaPascalCase + "RegistroAtivo.RegistroDaVisualizacao." + column.Name + " = formCollection[\"" + column.Name + "\"].ToGuid();");
                break;

            default:
                sb.AppendLine("ERRO: "+ column.Type.ToLower());
                break;
        }
    } #>
<#= sb.ToString() #>
        }
    }
}
